my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello my name is", "Hey I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value <- value * 2
return(value)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
cube <- (number)^3
return(cube)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Lion King", "Kill Bill", "TItanic", "Jurassic Park", "Mulan", "The Blind Side")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!", sep = " ")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
non_digit <- trimws(gsub("[0-9]", "", string), which = "both")
return(non_digit)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
letter <- remove_digits(c("INFO 201", "CSE 142"))
capitalized
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".",sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = NULL))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), " In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday
my_bday_intro
styler:::style_active_file()
rm(list = ls())
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(max_speed = max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(max_speed = max(speed, na.rm = TRUE))
library(nycflights13)
library(dplyr)
View(flights)
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(max_speed = max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(max_speed = max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean == mean(speed, na.rm= TRUE)) %>%
filter(max_speed == max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(max_speed == max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(mean == max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
mutate(speed = (distance / air_time) * 60) %>%
group_by(dest) %>%
summarize(mean = mean(speed, na.rm= TRUE)) %>%
filter(mean == max(mean, na.rm = TRUE))
View(highest_speed)
rm(highest_speed)
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_delay_for_each_dest <- flights %>% group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left.join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_delay_for_each_dest <- flights %>% group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
avg_delay_for_each_dest
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_delay <- flights %>% group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == min(avg_delay, na.rm = TRUE))
smallest_delay
# Load the dplyr library
library(dplyr)
setwd("Z:/info 201/ch10-dplyr/exercise-7/data")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv("nba_teams_2016.csv")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams <- read.csv("nba_teams_2016.csv")
rm(list = ls())
# Load the dplyr library
library(dplyr)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams <- read.csv("nba_teams_2016.csv")
View(nba_teams)
s)
ncol(nba_teams)
row.names(nba_teams)
colnames(nba_teams
colnames(nba_teams)
colnames(nba_teams)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams <- nba_teams %>% mutate(TOV/STL = TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams <- nba_teams %>% mutate(TOV/STL == TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams <- nba_teams %>% mutate(to/stl = tov / stl)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams <- nba_teams %>% mutate(to_ratio = tov / stl)
# Load the dplyr library
library(dplyr)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams <- read.csv("nba_teams_2016.csv")
(nba_teams)
nrow(nba_teams)
ncol(nba_teams)
row.names(nba_teams)
coln
View(nba_teams)
nrow(nba_teams)
ncol(nba_teams)
row.names(nba_teams)
colnames(nba_teams)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams <- mutate(nba_teams, TO_to_STL_ratio = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
lowest_ratio <- nba_teams %>% arrange(TO_to_STL_ratio) %>%
filter(TO_to_STL_ratio == max(TO_to_STL_ratio)) %>%
select(Team)
lowest_ratio
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
nba_teams <- %>% mutate(ass_per_game = ast / G)
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
nba_teams <- mutate(ass_per_game = ast / G)
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
nba_teams <- nba_teams %>%
mutate(ast_per_game = AST / G) %>%
arrange(-ast_per_game)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams %>% filter(pts >= 8700)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams %>% filter(PTS >= 8700)
View(good_offense)
# Create a data frame called `good_defense` of teams that had more than
# 470 blocks (BLK)
good_defense <- nba_teams %>% filter(BLK >= 470)
View(good_defense)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- nba_teams %>%  filter(ORB, FG, AST)
View(offense_stats)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- nba_teams %>%  select(ORB, FG, AST, Team)
View(offense_stats)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- nba_teams %>%  select(Team, ORB, FG, AST)
# Create a data frame called `defense_stats` that only shows defensive
# rebounds (DRB), steals (STL), and blocks (BLK) along with the team name.
defense_stats <- nba_teams %>%  select(Team, DRB, STL, BLK)
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(team1, team2)
}
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters(Golden State Warriors*, Memphis Grizzlies*)
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == team1, Team == team2)
}
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
View(winner)
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == team1)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
View(winner)
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == team1, team2)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == team1 & team2)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == c(team1, team2))
}
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams <- read.csv("nba_teams_2016.csv", stringsAsFactors = FALSE)
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
View(winner)
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == c(team1, team2)) %>%
select(Team, FG. == max(FG.), PTS)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == c(team1, team2)) %>%
filter(FG. == max(FG.)) %>%
select(Team, FG., PTS)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
View(winner)
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Cleveland Cavaliers*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("San Antonio Spurs*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Houston Rockets*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Toronto Rockets*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Toronto Rockets*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == c(team1, team2)) %>%
filter(FG. == max(FG.)) %>%
select(Team, FG., PTS)
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Toronto Rockets*", "Memphis Grizzlies*")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team1, team2) {
better_team <- nba_teams %>%  filter(Team == c(team1, team2)) %>%
filter(FG. == max(FG.)) %>%
select(Team, FG., PTS)
better_team
}
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Toronto Rockets*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Golden State Warriors*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Clevaland Cavaliers*", "Memphis Grizzlies*")
# Call the function on two teams to compare them (remember the `*` if needed)
winner <- better_shooters("Clevaland Cavaliers*", "Atlanta Hawks*")
